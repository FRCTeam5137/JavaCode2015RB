// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5137.JavaCode2015RB;

import org.usfirst.frc5137.JavaCode2015RB.commands.*;

import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());

    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton linearExtendButton;
    public JoystickButton linearRetractButton;
    public Joystick driveStick;
    public Joystick driveStick2;
    public JoystickButton pneumaticExtendButton;
    public JoystickButton pneumaticRetractButton;
    public JoystickButton raiseElevatorButton;
    public JoystickButton lowerElevatorButton;
    public Joystick launchpad;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        launchpad = new Joystick(2);
        
        lowerElevatorButton = new JoystickButton(launchpad, 8);
        lowerElevatorButton.whileHeld(new LowerElevator());
        raiseElevatorButton = new JoystickButton(launchpad, 9);
        raiseElevatorButton.whileHeld(new RaiseElevator());
        pneumaticRetractButton = new JoystickButton(launchpad, 12);
        pneumaticRetractButton.whileHeld(new PneumaticRetract());
        pneumaticExtendButton = new JoystickButton(launchpad, 13);
        pneumaticExtendButton.whileHeld(new PneumaticExtend());
        driveStick2 = new Joystick(1);
        
        driveStick = new Joystick(0);
        
        linearRetractButton = new JoystickButton(driveStick, 5);
        linearRetractButton.whileHeld(new LinearRetract());
        linearExtendButton = new JoystickButton(driveStick, 6);
        linearExtendButton.whileHeld(new LinearExtend());

	    
        // SmartDashboard Buttons
        SmartDashboard.putData("Drive", new Drive());

        SmartDashboard.putData("Drive Sideways", new DriveSideways());

        SmartDashboard.putData("Pneumatic Extend", new PneumaticExtend());

        SmartDashboard.putData("Linear Extend", new LinearExtend());

        SmartDashboard.putData("Linear Retract", new LinearRetract());

        SmartDashboard.putData("Pneumatic Retract", new PneumaticRetract());

        SmartDashboard.putData("Raise Elevator", new RaiseElevator());

        SmartDashboard.putData("Lower Elevator", new LowerElevator());

        SmartDashboard.putData("Autonomous", new Autonomous());

        SmartDashboard.putData("Push Auto", new PushAuto());

        SmartDashboard.putData("Do Nothing Auto", new DoNothingAuto());

        SmartDashboard.putData("Landfill Auto", new LandfillAuto());


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getDriveStick() {
        return driveStick;
    }

    public Joystick getDriveStick2() {
        return driveStick2;
    }

    public Joystick getLaunchpad() {
        return launchpad;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

